//
//  PostMsgViewController.m
//  sexduoduo
//
//  Created by Showm on 14-7-29.
//  Copyright (c) 2014年 dbCode. All rights reserved.
//

#import "PostMsgViewController.h"
#import "SevenSwitch.h"
#import "MKHttpExchangeDemo.h"
@interface PostMsgViewController ()<UIAlertViewDelegate,UITextViewDelegate>
{
    UIButton *niMingSwitch;
    
    BOOL isNiMing;//是否匿名
    NSMutableArray *imageArr;
    
    UIButton *submitBtn;//发布按钮
    UIActivityIndicatorView *actionIndicator;//菊花
}

@property (strong,nonatomic)UIButton *niMingSwitch;
@end

@implementation PostMsgViewController
@synthesize niMingSwitch;
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}


-(void)switchChanged:(UIButton *)sender
{
    sender.selected=!sender.selected;
    NSLog(@"Changed value to: %@", sender.selected ? @"ON" : @"OFF");
    
    isNiMing=sender.selected;
    
    
}

-(void)dealloc
{
    
}

-(void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];
    
    [opration cancel];
    opration=nil;
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    imageArr=[[NSMutableArray alloc]init];
    if (_reportImage != nil) {
        [imageArr addObject:_reportImage];
        //设置一下显示的图片
        [self setPicView];
    }
    
    [self setTopNavView];
    
    niMingSwitch = [UIButton buttonWithType:UIButtonTypeCustom];
    niMingSwitch.frame = CGRectMake(MAKEOF5(240), CGRectGetHeight(self.ImageContentView.frame)-32, 30, 30);
    [niMingSwitch addTarget:self action:@selector(switchChanged:) forControlEvents:UIControlEventTouchUpInside];
    [niMingSwitch setImage:[UIImage imageNamed:@"goods_nor.png"] forState:UIControlStateNormal];
    [niMingSwitch setImage:[UIImage imageNamed:@"goods_pre.png"] forState:UIControlStateSelected];
    [self.ImageContentView addSubview:niMingSwitch];
    
    
    
    //内容 textView
    self.detailTextView.backgroundColor=[UIColor clearColor];
    self.detailTextView.delegate=self;
    
    [self.view addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapClick:)]];
    //
    if (_titleStr.length > 0) {
        _biaoTiTextField.text = _titleStr;
    }
}

-(void)tapClick:(id)sender
{
    [self.view endEditing:YES];
}

//顶部NavView
-(void)setTopNavView
{
    int imgY = -20;
    if (IOS7_OR_LATER) {
        imgY = 0;
    }
    
    TopNavView *navView=[[TopNavView alloc] initWithFrame:CGRectMake(0, imgY,SCREEN_WIDTH, 64)];
    [self.view addSubview:navView];
    
    [navView addLeftBtnTarget:self action:@selector(toBackView) forControlEvents:UIControlEventTouchUpInside];
    
    [navView setTitleStr:@"发表帖子"];
    
    
    
    submitBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    submitBtn.frame = CGRectMake(SCREEN_WIDTH - 55, 30 , 45, 25);
    [submitBtn setTitle:@"发布" forState:UIControlStateNormal];
    submitBtn.titleLabel.font = [UIFont systemFontOfSize:14.0];
    submitBtn.layer.cornerRadius = 11.5;
    submitBtn.layer.borderColor = NAV_RED_COLOR.CGColor;
    submitBtn.layer.borderWidth = 0.5;
    [submitBtn setTitleColor:NAV_RED_COLOR forState:UIControlStateNormal];
    [submitBtn addTarget:self action:@selector(submitBBS) forControlEvents:UIControlEventTouchUpInside];
    submitBtn.tag=199;
    [navView addSubview:submitBtn];
    
    
    //转动的菊花
    actionIndicator = [[UIActivityIndicatorView alloc]initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhite];
    actionIndicator.center = submitBtn.center;//只能设置中心，不能设置大小
    actionIndicator.color=NAV_RED_COLOR;
    [navView addSubview:actionIndicator];
}

-(void)startAnimation
{
    submitBtn.hidden=YES;
    [actionIndicator startAnimating]; // 开始旋转

}

-(void)stopAnimation
{
    submitBtn.hidden=NO;
    [actionIndicator stopAnimating]; // 结束旋转
    
}
//发帖完成
- (void)toFinish
{
    if (_type == externalTypeSRRecord) {
        
        [self dismissViewControllerAnimated:NO completion:^{
            self.myBlock(nil);
        }];

       
    } else {
        [self dismissViewControllerAnimated:YES completion:nil];
    }
}
-(void)SRecordCallBack:(PostSuccessIdObject)callbackBlock
{
    self.myBlock =callbackBlock;
}

//返回
-(void)toBackView
{
    [self dismissViewControllerAnimated:YES completion:nil];
    
}

//提交帖子
-(void)submitBBS
{
    NSMutableDictionary *tempDic=[[NSMutableDictionary alloc]init];
    
        NSLog(@"长度%d",(int)self.biaoTiTextField.text.length);
    if (self.biaoTiTextField.text.length>0 && self.detailTextView.text.length>0) {
      
        if (self.biaoTiTextField.text.length<4) {
            [ShareFunction showAlertWithText:@"标题至少四个字"];
            return;
        }
        
        [tempDic setObject:self.biaoTiTextField.text forKey:@"title"];
        [tempDic setObject:self.detailTextView.text forKey:@"content"];
    }else{
        
        NSLog(@"请输入标题");
        [ShareFunction showAlertWithText:@"请输入标题或内容！"];
        return;
    }
    
    
    [tempDic setObject:self.forumId forKey:@"forumId"];
    [tempDic setObject:@"1" forKey:@"postTypeId"];
    [tempDic setObject:LUNTANUSERID forKey:@"userId"];
    NSString *isShowName=isNiMing ? @"1"  :  @"0" ;
    [tempDic setObject:isShowName forKey:@"isShowName"];
    [tempDic setObject:DEVICEUUID forKey:@"imie"];// 屏蔽设备号 使用
    
    NSMutableString *str=[[NSMutableString alloc]init];
    
    for (int i=0; i<imageArr.count; i++)
    {
        if (i>0) {
            [str appendString:[NSString stringWithFormat:@",%d",i+1]];
        }else
            [str appendString:[NSString stringWithFormat:@"%d",1]];
    }
   
    if (str.length>0) {
        [tempDic setObject:str forKey:@"scode"];
    }else [tempDic setObject:@"" forKey:@"scode"];
    
    
    
    [self startAnimation];

   opration = [[MKHttpExchangeDemo shareMyInstance] postExchangeInfoWithDic:tempDic andImageArr:imageArr completionHandler:^(id responseObject) {
        NSDictionary *responseDic = responseObject;
        NSLog(@"--<>>%@-发帖-%@",responseDic,[responseDic objectForKey:@"message"]);
        
        if ([responseDic[@"success"] intValue]==1) {
            UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"提示" message:@"发帖成功,需审核方可显示" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles: nil];
            [alert show];
        }else{
            UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"提示" message:[responseDic objectForKey:@"message"] delegate:nil cancelButtonTitle:@"确定" otherButtonTitles: nil];
            [alert show];
            
        }
        [self stopAnimation];
        [self toFinish];
    } errorHandler:^(NSError *error) {
        [self stopAnimation];
        
        UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"提示" message:@"亲，发帖失败" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles: nil];
        [alert show];
    }];

}



//接收到服务器回应的时候调用此方法
NSMutableData *receiveData;
- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    NSHTTPURLResponse *res = (NSHTTPURLResponse *)response;
    NSLog(@"%@",[res allHeaderFields]);
    receiveData=[[NSMutableData alloc]init];
}
//接收到服务器传输数据的时候调用，此方法根据数据大小执行若干次
-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data
{
    [receiveData appendData:data];
}
//数据传完之后调用此方法
-(void)connectionDidFinishLoading:(NSURLConnection *)connection
{

    NSDictionary *reJson= [[NSJSONSerialization JSONObjectWithData:receiveData options:NSJSONReadingAllowFragments error:nil] copy];
    NSLog(@"rejson=%@",reJson);
    if ([reJson[@"success"] intValue]==1) {
       
        UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"提示" message:@"发帖成功" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles: nil];
        [alert show];
        
        [self stopAnimation];
        [self toBackView];
        
    }else {
        [self stopAnimation];
        
        UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"提示" message:@"上传服务器失败" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles: nil];
        [alert show];
    }
}

- (void)connection:(NSURLConnection *)theConnection didFailWithError:(NSError *)error
{
    [self stopAnimation];
    
    UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"提示" message:@"上传服务器失败" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles: nil];
    [alert show];
    NSLog(@"response error%@", [error localizedFailureReason]);
}


- (IBAction)choosePicAction:(id)sender {
    
    if (imageArr.count<9) {
        UIActionSheet *picActinon = [[UIActionSheet alloc]
                                     initWithTitle:nil
                                     delegate:self
                                     cancelButtonTitle:@"取消"
                                     destructiveButtonTitle:nil
                                     otherButtonTitles: @"照相机", @"本地相册",nil];
        
        [picActinon showInView:self.view];
    }else{
        UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"提示" message:@"图片数量不能超过9张" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles: nil];
        [alert show];
    }
    
   
}

#pragma mark - UITextViewDelegate
-(BOOL)textViewShouldBeginEditing:(UITextView *)textView
{
    self.contentDefaultLab.hidden=YES;
    return YES;
}

-(BOOL)textViewShouldEndEditing:(UITextView *)textView
{
    if (self.detailTextView.text.length==0) {
        self.contentDefaultLab.hidden=NO;
    }
    return YES;
}

- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString*)string{
    DLog(@"[[UITextInputMode currentInputMode]primaryLanguage] is %@",string);
    if(!useEmojiAble)
    {
        if ([[[UITextInputMode currentInputMode]primaryLanguage] isEqualToString:@"emoji"]) {
            return NO;
        }
    }
    
    return YES;
}

#pragma mark - photo
- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
    //呼出的菜单按钮点击后的响应

    switch (buttonIndex)
    {
        case 0:  //打开照相机拍照
            [self takePhoto];
            break;
            
        case 1:  //打开本地相册
            [self LocalPhoto];
            break;
    }
        
}
//打开本地相册
-(void)LocalPhoto
{
    CTAssetsPickerController *picker = [[CTAssetsPickerController alloc] init];
    picker.maximumNumberOfSelection = 9-imageArr.count;
    picker.assetsFilter = [ALAssetsFilter allAssets];
    picker.delegate = self;
    
    [self presentViewController:picker animated:YES completion:NULL];
}
#pragma mark - Assets Picker Delegate

- (void)assetsPickerController:(CTAssetsPickerController *)picker didFinishPickingAssets:(NSArray *)assets
{

    
    for (ALAsset *asset in assets){
        if (imageArr.count>=9) {
            
            UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"提示" message:@"图片数量不能超过9张" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles: nil];
            [alert show];
            //设置一下显示的图片
            [self setPicView];
            return;
        }
        [imageArr addObject:[UIImage imageWithCGImage:asset.defaultRepresentation.fullScreenImage]]; //完全分辨率的图片 耗内存，此处使用全屏图片
        
        
    }
    
    //设置一下显示的图片
    [self setPicView];
}
#pragma mark 重新布局
-(void)setPicView
{
    CGFloat distance_Y=10;
    CGFloat distance_X=20;
    CGPoint pt;
    //将所有button 删除 重新添加
    NSArray*subviews= self.ImageContentView.subviews;
    for (id subview in subviews) {
        if ([subview isKindOfClass:[UIButton class]]) {
            [subview removeFromSuperview];
        }
    }
    
    for (int i=0; i<imageArr.count; i++) {
        UIButton *imageButton=[UIButton buttonWithType:0];
        [imageButton setImage:imageArr[i] forState:0];
        [imageButton addTarget:self action:@selector(imageBtnClick:) forControlEvents:UIControlEventTouchUpInside];
        imageButton.tag=i;
        [self.ImageContentView addSubview:imageButton];
        
        if (i==0) {
            pt.x=distance_X;
            pt.y=distance_Y;
        }
        if (pt.x>300) {
            pt.x=distance_X;
            pt.y=pt.y+ 55 + distance_Y;
            
        }
        //调整imageButton的位置
        imageButton.frame=CGRectMake(pt.x , pt.y , 55, 55);
        
        pt.x +=55+distance_X;
        
        
        // 调整 添加按钮的位置
        if (i==imageArr.count-1) {
            if (pt.x>300) {
                pt.x=distance_X;
                pt.y=pt.y+ 55 + distance_Y;
                
            }
            
            self.addImageBtn.frame=CGRectMake(pt.x , pt.y , 55, 55);
            [self.ImageContentView addSubview:self.addImageBtn];
        }
    }
    
    if (imageArr.count==0) {
        pt.x=distance_X;
        pt.y=distance_Y;
        self.addImageBtn.frame=CGRectMake(pt.x , pt.y , 55, 55);
        [self.ImageContentView addSubview:self.addImageBtn];
    }
    
    
    CGRect frame=self.ImageContentView.frame;
    self.ImageContentView.frame=CGRectMake(frame.origin.x, frame.origin.y, SCREEN_WIDTH, pt.y+55+distance_Y +8+32);
    niMingSwitch.frame=CGRectMake(240, CGRectGetHeight(self.ImageContentView.frame)-32, 30, 30);
    [self.ImageContentView addSubview:niMingSwitch];
    
    self.mainScView.contentSize=CGSizeMake(SCREEN_WIDTH, 68+CGRectGetMaxY(self.ImageContentView.frame)+20);
    NSLog(@"size=%@  frame=%@",NSStringFromCGSize(self.mainScView.contentSize),NSStringFromCGRect(self.mainScView.frame));
    
    
}




-(void)imageBtnClick:(id)sender
{
    UIAlertView *alert=[[UIAlertView alloc]initWithTitle:@"提示" message:@"是否删除该图片" delegate:self cancelButtonTitle:@"否" otherButtonTitles:@"是", nil];
    alert.tag=1000+[(UIButton*)sender tag];
    [alert show];
    
    
}

-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{
    if (alertView.tag>=1000) {
        if (buttonIndex==1) {
            [imageArr removeObjectAtIndex:alertView.tag-1000];
            [self setPicView];
        }
    }
}


//开始拍照
-(void)takePhoto
{
    UIImagePickerControllerSourceType sourceType = UIImagePickerControllerSourceTypeCamera;
    if ([UIImagePickerController isSourceTypeAvailable: UIImagePickerControllerSourceTypeCamera])
    {
        UIImagePickerController *picker = [[UIImagePickerController alloc] init];
        picker.delegate = self;
        //设置拍照后的图片可被编辑
        picker.allowsEditing = YES;
        picker.sourceType = sourceType;
        [self presentModalViewController:picker animated:YES];
    }else
    {
        NSLog(@"模拟其中无法打开照相机,请在真机中使用");
    }
}


//当选择一张图片后进入这里
-(void)imagePickerController:(UIImagePickerController*)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
    
    NSString *type = [info objectForKey:UIImagePickerControllerMediaType];
    
    //当选择的类型是图片
    if ([type isEqualToString:@"public.image"])
    {
        // 先把图片转成NSData
        UIImage* image = [info objectForKey:@"UIImagePickerControllerOriginalImage"];
        
        // 关闭相册界面
        [picker dismissModalViewControllerAnimated:YES];
        
        // 缩放并添加到数值
        UIImage *newImage = [self scaleImage:image toScaleWidth:SCREEN_WIDTH];
        [imageArr addObject:newImage];
        [self setPicView];
        
    }
    
}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    NSLog(@"您取消了选择图片");
    [picker dismissModalViewControllerAnimated:YES];
}

- (NSString *)documentFolderPath
{
    return [NSHomeDirectory() stringByAppendingPathComponent:@"Documents"];
    
    
}


// 压缩图片

-(UIImage*)imageWithImage:(UIImage*)image
             scaledToSize:(CGSize)newSize;
{
    UIGraphicsBeginImageContext( newSize );
    [image drawInRect:CGRectMake(0,0,newSize.width,newSize.height)];
    UIImage* newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return newImage;
}

// 比例缩放
- (UIImage *)scaleImage:(UIImage *)image toScale:(float)scaleSize
{
    UIGraphicsBeginImageContext(CGSizeMake(image.size.width*scaleSize,image.size.height*scaleSize));
    [image drawInRect:CGRectMake(0, 0, image.size.width * scaleSize, image.size.height *scaleSize)];
    UIImage *scaledImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return scaledImage;
}

// 比例缩放
- (UIImage *)scaleImage:(UIImage *)image toScaleWidth:(float)width
{
    UIGraphicsBeginImageContext(CGSizeMake(width,image.size.height*width/image.size.width));
    [image drawInRect:CGRectMake(0, 0, width, image.size.height*width/image.size.width)];
    UIImage *scaledImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return scaledImage;
}





- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
